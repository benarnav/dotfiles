#!/bin/bash
# Dotfiles installation script

set -e  # Exit on error

# Get the directory where the script is located
DOTFILES_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

echo "Installing dotfiles from $DOTFILES_DIR"

# Verbose symlink function
symlink() {
    printf '%55s -> %s\n' "${1/#$HOME/\~}" "${2/#$HOME/\~}"
    ln -nsf "$@"
}

# Install essential packages
echo "Installing essential packages..."
sudo apt-get update -y
sudo apt-get install -y vim tmux zsh curl wget 

# Initialize git submodules if they exist
if [ -f "$DOTFILES_DIR/.gitmodules" ]; then
    echo "Initializing git submodules..."
    cd "$DOTFILES_DIR"
    git submodule init
    git submodule update
fi

# Install UV package manager
echo "Installing uv..."
curl -LsSf https://astral.sh/uv/install.sh | sh

# Set up Oh My Zsh if not already installed
if [ ! -d "$HOME/.oh-my-zsh" ]; then
    echo "Installing Oh My Zsh..."
    sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended
else
    echo "Oh My Zsh already installed, skipping..."
fi

echo "Installing zsh plugins..."
# zsh-autosuggestions
git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions 2>/dev/null || echo "zsh-autosuggestions already installed"

# zsh-syntax-highlighting
git clone https://github.com/zsh-users/zsh-syntax-highlighting ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting 2>/dev/null || echo "zsh-syntax-highlighting already installed"

# zsh-history-substring-search
git clone https://github.com/zsh-users/zsh-history-substring-search ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-history-substring-search 2>/dev/null || echo "zsh-history-substring-search already installed"

# Install bat and create alias if needed
echo "Installing bat..."
if ! command -v bat &> /dev/null; then
    sudo apt-get install -y bat
    
    # Check if bat is installed as batcat (Ubuntu/Debian specific)
    if command -v batcat &> /dev/null && ! command -v bat &> /dev/null; then
        echo "Creating bat -> batcat symlink..."
        mkdir -p ~/.local/bin
        ln -sf /usr/bin/batcat ~/.local/bin/bat
    fi
else
    echo "bat already installed, skipping..."
fi

# Define dotfiles to link
dotfiles=(
    ".bashrc"
    ".zshrc"
    ".vimrc"
    ".nanorc"
    ".tmux.conf"
)

# Create symbolic links for each dotfile
echo "Creating symbolic links..."
for f in "${dotfiles[@]}"; do
    # Remove existing directory (if it's a directory and not a symlink)
    if [[ -d "$HOME/$f" && ! -L "$HOME/$f" ]]; then
        rm -r "$HOME/$f"
    fi
    symlink "$DOTFILES_DIR/${f}" "$HOME/$f"
done

# Create .local/bin if it doesn't exist
mkdir -p "$HOME/.local/bin"

# Link the env file
if [ -f "$DOTFILES_DIR/.local/bin/env" ]; then
    mkdir -p "$HOME/.local/bin"
    symlink "$DOTFILES_DIR/.local/bin/env" "$HOME/.local/bin/env"
    chmod +x "$DOTFILES_DIR/.local/bin/env"  # Make the source file executable, not the symlink
else
    echo "Warning: env file not found in dotfiles"
fi

# Set up ghostty config if needed
if [ -d "$DOTFILES_DIR/ghostty" ]; then
    mkdir -p "$HOME/.config"
    symlink "$DOTFILES_DIR/ghostty" "$HOME/.config/ghostty"
fi

# For neovim config compatibility
if [ -d "$DOTFILES_DIR/.vim" ]; then
    mkdir -p "$HOME/.config"
    symlink "$HOME/.vim" "$HOME/.config/nvim"
fi

# Set zsh as default shell
if [ "$SHELL" != "$(which zsh)" ]; then
    echo "Setting zsh as default shell..."
    sudo chsh -s $(which zsh) $USER
    echo "Shell changed to zsh. You may need to log out and back in for this to take effect."
fi

# Install any vim plugins if there's a plugin manager
if [ -f "$HOME/.vimrc" ] && [ -t 1 ]; then
    echo "Installing vim plugins..."
    vim '+PlugInstall --sync' +qa || echo "Vim plugin installation skipped."
else
    echo "May need to run: vim +'PlugInstall --sync' +qa"
fi

# Generate new SSH key
echo "Generating new SSH key..."
ssh-keygen -t ed25519 -C "github@benjaminarnav.com" -f "$HOME/.ssh/id_ed25519" -N ""

# Start SSH agent
eval "$(ssh-agent -s)"

# Add key to SSH agent
ssh-add "$HOME/.ssh/id_ed25519"

echo "Here is your public SSH key (add this to GitHub):"
if command -v bat &> /dev/null; then
    bat "$HOME/.ssh/id_ed25519.pub"
else
    cat "$HOME/.ssh/id_ed25519.pub"
fi

echo "Starting zsh..."
exec zsh -l

